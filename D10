import java.io.BufferedReader
import java.io.IOException
import java.io.InputStreamReader
import java.io.PrintWriter
import java.lang.Exception
import java.util.*
import kotlin.math.max
import kotlin.math.min
import kotlin.system.exitProcess


fun main() {
    MainJava().run()
}

class MainJava {
    private fun solveTest() {
        val n = readInt()
        val color = readString().toCharArray()[0]
        var line = readString()
        line += line
        line = line.reversed()
        var answer = 0
        var last = -n
        for (i in 0..2 * n - 1) {
            if (line[i] == 'g') last = i
            if (i < n) continue
            if (line[i] == color) answer = max(answer, i - last)
        }
        out.print(answer.toString() + "\n")
    }

    @Throws(IOException::class)
    fun solve() {
        var t = readInt()
        while (t-- > 0) solveTest()
    }

    private var `in` = BufferedReader(InputStreamReader(System.`in`))
    private var out = PrintWriter(System.out)
    private var tok = StringTokenizer("")

    fun run() {
        try {
            solve()
            out.flush()
            out.close()
        } catch (e: Exception) {
            e.printStackTrace()
            exitProcess(-1)
        }
    }

    @Throws(IOException::class)
    fun readLine(): String {
        return `in`.readLine()
    }

    var delimiter = " "

    @Throws(IOException::class)
    fun readString(): String {
        while (!tok.hasMoreTokens()) {
            val nextLine = readLine()
            tok = StringTokenizer(nextLine)
        }
        return tok.nextToken(delimiter)
    }

    @Throws(IOException::class)
    fun readIntArray(n: Int): IntArray {
        val array = IntArray(n)
        for (i in 0..<n) {
            array[i] = readInt()
        }
        return array
    }

    @Throws(IOException::class)
    fun readInt(): Int {
        return readString().toInt()
    }

    fun sortIntArray(a: IntArray) {
        val n = a.size
        val arr = ArrayList<Int>(n)
        for (j in a) arr.add(j)
        arr.sort()
        for (i in 0..<n) a[i] = arr[i]
    }

    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            MainJava().run()
        }
    }
}