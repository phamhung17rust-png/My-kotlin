import java.util.*
import kotlin.*

import java.io.InputStream
import java.io.PrintWriter
import java.lang.NumberFormatException
import java.lang.StringBuilder

fun main(args: Array<String>) {
    Program().solve()
}

class Program {
    fun solve() {
        val o = PrintWriter(System.out)
        
        val sc = FastScanner()
        var t = sc.nextInt()
        
        while (t > 0) {
            var n = sc.nextInt()
            if (n < 1000) {
                o.print(n)
            } else if (n < 999500) {
                if (n % 1000 < 500) {
                    o.print(n / 1000)
                    o.print('K')
                } else {
                    o.print(n / 1000 + 1)
                    o.print('K')
                }
            } else if (n < 1000500) {
                o.print("1M")
            } else {
                if (n % 1000000 < 500000) {
                    o.print(n / 1000000)
                    o.print("M")
                } else {
                    o.print(n / 1000000 + 1)
                    o.print("M")
                }
            }
            o.println()
            t--    
        }
        
        
        /*
        for (it in ans) {
            o.print(it)
            o.print(' ')
        }
        */
        
        o.close()
    }
}

class FastScanner {
    companion object {
        val input: InputStream = System.`in`
        val buffer = ByteArray(1024) { 0 }
        fun isPrintableChar(c: Int): Boolean = c in 33..126
    }

    var ptr = 0
    var buflen = 0
    private fun hasNextByte(): Boolean {
        if (ptr < buflen) {
            return true
        } else {
            ptr = 0
            buflen = input.read(buffer)
            if (buflen <= 0) {
                return false
            }
        }
        return true
    }

    private fun readByte(): Int = if (hasNextByte()) buffer[ptr++].toInt() else -1

    private fun skipUnprintable() {
        while (hasNextByte() && !isPrintableChar(buffer[ptr].toInt())) ptr++
    }

    fun hasNext(): Boolean {
        skipUnprintable()
        return hasNextByte()
    }

    fun next(): String {
        if (!hasNext()) throw NoSuchElementException()
        val sb = StringBuilder()
        var b = readByte()
        while (isPrintableChar(b)) {
            sb.appendCodePoint(b)
            b = readByte()
        }
        return sb.toString()
    }

    fun nextInt(): Int {
        if (!hasNext()) throw NoSuchElementException()
        var n = 0
        var b = readByte()
        // '-' = 45
        val minus = b == 45
        if (minus) {
            b = readByte()
        }

        // '0' = 48 '9' = 57
        if (b !in 48..57) {
            throw NumberFormatException()
        }

        while (true) {
            if (b in 48..57) {
                n *= 10
                n += b - 48
            } else if (b == -1 || !isPrintableChar(b)) {
                return if (minus) -n else n
            } else {
                throw NumberFormatException()
            }
            b = readByte()
        }
    }

    fun nextLong(): Long {
        if (!hasNext()) throw NoSuchElementException()
        var n = 0L
        var b = readByte()
        // '-' = 45
        val minus = b == 45
        if (minus) {
            b = readByte()
        }

        // '0' = 48 '9' = 57
        if (b !in 48..57) {
            throw NumberFormatException()
        }

        while (true) {
            if (b in 48..57) {
                n *= 10
                n += b - 48
            } else if (b == -1 || !isPrintableChar(b)) {
                return if (minus) -n else n
            } else {
                throw NumberFormatException()
            }
            b = readByte()
        }
    }

    fun nextDouble(): Double = next().toDouble()
}