import java.io.BufferedReader
import java.io.InputStream
import java.io.InputStreamReader
import java.util.*
import kotlin.math.*

class MyReader(inputStream: InputStream) {
    private val reader = BufferedReader(InputStreamReader(inputStream))
    private var tokenizer: StringTokenizer? = null
   
    fun next(): String {
      while (true) {
        tokenizer.let {
          if (it == null || !it.hasMoreTokens()) {
            tokenizer = StringTokenizer(reader.readLine())
          } else {
            return it.nextToken()
          }
        }
      }
    }
  }
  val reader = MyReader(System.`in`)
  fun next() = reader.next()
  fun nextInt() = next().toInt()
  fun nextLong() = next().toLong()
  fun nextDouble() = next().toDouble()
  fun nextStrings(n: Int) = Array(n) { next() }
  fun nextInts(n: Int) = IntArray(n) { nextInt() }
  fun nextLongs(n: Int) = LongArray(n) { nextLong() }
  fun nextDoubles(n: Int) = DoubleArray(n) { nextDouble() }
fun main(){
    val n=nextInt()
    val A=nextInts(n)
    var Dp=Array<IntArray>(2) { IntArray(n) { -2 } }
    Dp[0][0]=-1;
    Dp[1][0]=-1;
    for(i in 1..n-1){
        if(A[i-1]<A[i]){
          Dp[0][i]=Dp[0][i-1];
        }
        if(A[i-1]>A[i]){
          Dp[1][i]=Dp[1][i-1];
        }
        if(Dp[0][i]!=-1 && Dp[1][i-1]!=-2 && (Dp[1][i-1]==-1 || A[Dp[1][i-1]]<A[i])){
          if(Dp[0][i]==-2){
            Dp[0][i]=i-1;
          }else{
            if(A[Dp[0][i]]<A[i-1]){
              Dp[0][i]=i-1;
            }
          }
        }
        if(Dp[1][i]!=-1 && Dp[0][i-1]!=-2 && (Dp[0][i-1]==-1 || A[Dp[0][i-1]]>A[i])){
          if(Dp[1][i]==-2){
            Dp[1][i]=i-1;
          }else{
            if(A[Dp[1][i]]>A[i-1]){
              Dp[1][i]=i-1;
            }
          }
        }
    }
  //  println(Dp[0].joinToString(" "));
 //   println(Dp[1].joinToString(" "));
    if(Dp[1][n-1]==-2 && Dp[0][n-1]==-2){
      println("NO")
      return
    }
    println("YES")
    var ans=0;
    var Ans=IntArray(n){ 0 };
    if(Dp[0][n-1]==-2){
      ans=1;
    }
    var cur=n-1;
    while(cur!=-1){
      Ans[cur]=ans;
      if(Dp[ans][cur]==cur-1){
        ans=if(ans==1)0 else 1
      }
      cur--;
    }
    println(Ans.joinToString(" "))
    
}