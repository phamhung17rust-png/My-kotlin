import kotlin.math.*

private fun readInt() = readln().toInt()
private fun readInts() = readln().split(" ").map { it.toInt() }

fun solve() {
    val (n, m, k) = readInts()
    val a = List<Int>(1) { 0 } + readInts().sorted()
    var ans: Long = 1000000000000000000L
    val pre = LongArray(n + 1)
    for (i in 1..n) pre[i] = pre[i - 1] + a[i]
    for (i in m..n) {
        var l = i - m + 1
        var r = (i + i - m + 1) / 2
        fun cal(j: Int): Long = a[j].toLong() * (j - (i - m)) - (pre[j] - pre[i - m])
        while (l < r) {
            val mid = (l + r) / 2 + 1
            if (cal(mid) <= k.toLong()) l = mid
            else r = mid - 1
        }
        var y = a[l]
        if (l != (i + i - m + 1) / 2) y += (k - cal(l)).toInt() / (l - (i - m))
        ans = min(ans, y.toLong() * ((l - (i - m)) - (i - l)) - (pre[l] - pre[i - m]) + (pre[i] - pre[l]))
    }
    println(ans)
}

fun main() {
    solve()
}