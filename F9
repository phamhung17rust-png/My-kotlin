 
import kotlin.jvm.JvmStatic
import java.io.BufferedReader
import java.util.StringTokenizer
import java.io.IOException
import java.io.InputStream
import java.io.InputStreamReader
import java.lang.Exception
 
object programkt {
    @JvmStatic
    fun main(args: Array<String>) {
        val MAX_A = 150005
        val scanner = FastScanner(System.`in`)
        val n = scanner.nextInt()
        var m = 0
        var res = 0
        val a = IntArray(n)
        val cnt = IntArray(MAX_A)
        val vis = BooleanArray(MAX_A)
        for (i in 0 until n) {
            a[i] = scanner.nextInt()
            ++cnt[a[i]]
            m = Math.max(m, a[i] + 1)
        }
        for (i in 1..m) {
            if (cnt[i] <= 0) continue
            if (i - 1 > 0 && !vis[i - 1]) {
                vis[i - 1] = true
                --cnt[i]
            }
            if (cnt[i] <= 0) continue
            if (!vis[i]) {
                vis[i] = true
                --cnt[i]
            }
            if (cnt[i] <= 0) continue
            if (!vis[i + 1]) {
                vis[i + 1] = true
                --cnt[i]
            }
        }
        for (i in 1..m) if (vis[i]) ++res
        println(res)
    }
 
    internal class FastScanner(inputStream: InputStream?) {
        var br: BufferedReader
        var st: StringTokenizer?
 
        init {
            br = BufferedReader(InputStreamReader(inputStream))
            st = null
        }
 
        fun nextLine(): String {
            var res = ""
            try {
                res = br.readLine()
            } catch (e: IOException) {
                e.printStackTrace()
            }
            return res
        }
 
        operator fun next(): String {
            while (st == null || !st!!.hasMoreTokens()) try {
                st = StringTokenizer(br.readLine())
            } catch (e: Exception) {
                e.printStackTrace()
            }
            return st!!.nextToken()
        }
 
        fun nextInt(): Int {
            return next().toInt()
        }
 
        fun nextLong(): Long {
            return next().toLong()
        }
 
        fun nextDouble(): Double {
            return next().toDouble()
        }
 
        fun nextFloat(): Float {
            return next().toFloat()
        }
 
        fun nextByte(): Byte {
            return next().toByte()
        }
 
        fun nextShort(): Short {
            return next().toShort()
        }
    }
}