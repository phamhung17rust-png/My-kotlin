import java.io.BufferedInputStream
import java.lang.StringBuilder

private class FastScanner {
    private val input = BufferedInputStream(System.`in`)
    private val buffer = ByteArray(1 shl 16)
    private var len = 0
    private var ptr = 0

    private fun readByte(): Int {
        if (ptr >= len) {
            len = input.read(buffer)
            ptr = 0
            if (len <= 0) return -1
        }
        return buffer[ptr++].toInt()
    }

    fun nextInt(): Int {
        var c = readByte()
        while (c <= 32 && c >= 0) c = readByte()
        var sign = 1
        if (c == '-'.code) {
            sign = -1
            c = readByte()
        }
        var x = 0
        while (c > 32) {
            x = x * 10 + (c - '0'.code)
            c = readByte()
        }
        return x * sign
    }
}

fun main() {
    val fs = FastScanner()
    val out = StringBuilder()

    val TT = fs.nextInt()
    repeat(TT) {
        val n = fs.nextInt()
        val a = IntArray(n) { fs.nextInt() }

        val ans = IntArray(n)
        var sz = 0

        var mi = a[0]
        for (i in 1 until n) {
            if (a[i] >= mi) {
                ans[sz++] = i + 1
            } else {
                mi = a[i]
            }
        }

        out.append(sz).append('\n')
        for (i in 0 until sz) {
            if (i > 0) out.append(' ')
            out.append(ans[i])
        }
        out.append('\n')
    }

    print(out.toString())
}
